// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;
// UNASSIGNED is used for empty cells in sudoku grid 
#define UNASSIGNED 0  

// N is used for the size of Sudoku grid.  
// Size will be NxN  
#define N 9  


 // } Driver Code Ends
class Solution 
{
    public:
    //Function to find a solved Sudoku. 
    bool isvalid(int i,int j, int n, int grid[N][N]){
        for(int k=0; k<N; k++){
            if(grid[i][k] == n || grid[k][j] == n) { return false; }
            
            int s = (int)sqrt(N);
            int rs = i - i % s;
            int cs = j - j % s;
            
            for(int r=rs; r<rs+s; r++){
                for(int c=cs; c<cs+s; c++){
                    if(grid[r][c]==n) { return false; }
                }
            }
        }
        return true;
    }
    
    
    bool SolveSudoku(int grid[N][N])  
    { 
        int i,j;
        bool isEmpty = true; 
        for(i=0; i<N; i++){
            for(j=0; j<N; j++){
                if(grid[i][j] == 0) { isEmpty = false; break; }
            }
            if(!isEmpty) { break; }
        }
        
        if(isEmpty) { return true; }
        
        for(int n=1; n<=N; n++){
            if(isvalid(i,j,n,grid)){
                grid[i][j] = n;
                
                if(SolveSudoku(grid)) { return true; }
                
                grid[i][j] = 0;
            }
        }
        return false;
    }
    
    void printGrid (int grid[N][N]) 
    {
        for(int i=0;i<9;i++)
        {
            for(int j=0;j<9;j++)
            cout<<grid[i][j]<<" ";
        }
    }
};

// { Driver Code Starts.

int main() {
	int t;
	cin>>t;
	while(t--)
	{
		int grid[N][N];
		
		for(int i=0;i<9;i++)
		    for(int j=0;j<9;j++)
		        cin>>grid[i][j];
		        
		Solution ob;
		
		if (ob.SolveSudoku(grid) == true)  
            ob.printGrid(grid);  
        else
            cout << "No solution exists";  
        
        cout<<endl;
	}
	
	return 0;
}  // } Driver Code Ends
